name: Sign iOS Shortcut

on:
  workflow_dispatch:
    inputs:
      shortcut_data:
        description: 'Base64 encoded shortcut plist data'
        required: true
        type: string
      shortcut_name:
        description: 'Name of the shortcut'
        required: true
        type: string
      callback_url:
        description: 'Optional callback URL for completion notification'
        required: false
        type: string

jobs:
  sign-shortcut:
    runs-on: self-hosted
    
    steps:
    - name: Sign Shortcut (Ultra Fast)
      run: |
        echo "üöÄ Starting ultra-fast shortcut signing..."
        echo "üìù Shortcut name: ${{ github.event.inputs.shortcut_name }}"
        
        # Sanitize shortcut name for filename (remove emojis and special chars)
        SANITIZED_NAME=$(echo "${{ github.event.inputs.shortcut_name }}" | sed 's/[^a-zA-Z0-9 ._-]//g' | sed 's/  */ /g' | xargs)
        echo "üßπ Sanitized filename: $SANITIZED_NAME"
        
        # üîß CRITICAL FIX: Clean workspace to prevent cache contamination
        echo "üóëÔ∏è Cleaning workspace to prevent cache issues..."
        rm -rf ~/actions-runner/_work/sgs/sgs/*.shortcut ~/actions-runner/_work/sgs/sgs/*.plist 2>/dev/null || true
        
        # Create isolated temp directory
        TEMP_DIR=$(mktemp -d)
        SHORTCUT_FILE="$TEMP_DIR/input.shortcut"
        SIGNED_FILE="$TEMP_DIR/${SANITIZED_NAME}.shortcut"
        
        echo "üîç Working in isolated directory: $TEMP_DIR"
        
        # Decode and validate shortcut data
        echo "${{ github.event.inputs.shortcut_data }}" | base64 -d > "$SHORTCUT_FILE"
        
        # üîç VALIDATION: Check shortcut content matches request
        echo "üîç Validating shortcut content..."
        if command -v plutil >/dev/null 2>&1; then
          SHORTCUT_NAME_IN_PLIST=$(plutil -extract WFWorkflowName raw "$SHORTCUT_FILE" 2>/dev/null || echo "Unknown")
          echo "üìã Shortcut name in plist: '$SHORTCUT_NAME_IN_PLIST'"
          echo "üìã Expected name pattern: '${{ github.event.inputs.shortcut_name }}'"
        fi
        
        # Sign the shortcut
        if plutil -lint "$SHORTCUT_FILE" > /dev/null 2>&1; then
          echo "‚úÖ Shortcut plist is valid"
          echo "üîê Signing shortcut..."
          
          # Clear temp directory of any existing signed files
          find "$TEMP_DIR" -name "*.shortcut" -not -name "input.shortcut" -delete 2>/dev/null || true
          
          if shortcuts sign --mode anyone --input "$SHORTCUT_FILE" --output "$TEMP_DIR/signed.shortcut"; then
            echo "‚úÖ Shortcut signing command completed"
            
            # Find the actual signed file (shortcuts CLI might create different name)
            ACTUAL_SIGNED=$(find "$TEMP_DIR" -name "*.shortcut" -not -name "input.shortcut" | head -n 1)
            
            if [ -f "$ACTUAL_SIGNED" ]; then
              # Ensure proper filename for download
              if [ "$ACTUAL_SIGNED" != "$SIGNED_FILE" ]; then
                mv "$ACTUAL_SIGNED" "$SIGNED_FILE"
                echo "üìù Renamed to: $(basename "$SIGNED_FILE")"
              fi
              
              echo "‚úÖ Shortcut signed successfully ($(stat -f%z "$SIGNED_FILE") bytes)"
              echo "üîç Final file: $(basename "$SIGNED_FILE")"
              echo "SIGNED_FILE=$SIGNED_FILE" >> $GITHUB_ENV
            else
              echo "‚ùå Could not find signed shortcut file in $TEMP_DIR"
              echo "üìÅ Directory contents:"
              ls -la "$TEMP_DIR"
              exit 1
            fi
          else
            echo "‚ùå Shortcut signing command failed"
            exit 1
          fi
        else
          echo "‚ùå Invalid shortcut plist format"
          exit 1
        fi
        
    - name: Upload Signed Shortcut
      uses: actions/upload-artifact@v4
      with:
        name: signed-shortcut-${{ github.run_id }}
        path: ${{ env.SIGNED_FILE }}
        retention-days: 1
        
    - name: Notify Completion
      if: github.event.inputs.callback_url != ''
      run: |
        curl -X POST "${{ github.event.inputs.callback_url }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"success\",
            \"run_id\": \"${{ github.run_id }}\",
            \"shortcut_name\": \"${{ github.event.inputs.shortcut_name }}\",
            \"download_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
          }" 
