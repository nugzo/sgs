name: Sign iOS Shortcut

on:
  workflow_dispatch:
    inputs:
      shortcut_data:
        description: 'Base64 encoded shortcut plist data'
        required: true
        type: string
      shortcut_name:
        description: 'Name of the shortcut'
        required: true
        type: string
      callback_url:
        description: 'Optional callback URL for completion notification'
        required: false
        type: string

jobs:
  sign-shortcut:
    runs-on: self-hosted
    
    steps:
    - name: Setup Environment
      run: |
        echo "üîê Starting shortcut signing process..."
        echo "üìù Shortcut name: ${{ github.event.inputs.shortcut_name }}"
        
    - name: Decode and Create Shortcut File
      run: |
        # Create temp directory
        TEMP_DIR=$(mktemp -d)
        SHORTCUT_FILE="$TEMP_DIR/${{ github.event.inputs.shortcut_name }}.shortcut"
        
        # Decode base64 shortcut data
        echo "${{ github.event.inputs.shortcut_data }}" | base64 -d > "$SHORTCUT_FILE"
        
        echo "‚úÖ Shortcut file created: $SHORTCUT_FILE"
        echo "üìä File size: $(stat -f%z "$SHORTCUT_FILE") bytes"
        
        # Export paths for next steps
        echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV
        echo "SHORTCUT_FILE=$SHORTCUT_FILE" >> $GITHUB_ENV
        
    - name: Validate Shortcut Format
      run: |
        echo "üîç Validating shortcut format..."
        
        # Check if file is readable plist
        if plutil -lint "$SHORTCUT_FILE" > /dev/null 2>&1; then
          echo "‚úÖ Valid plist format"
        else
          echo "‚ùå Invalid plist format"
          exit 1
        fi
        
        # Check for required keys
        if plutil -extract WFWorkflowName raw "$SHORTCUT_FILE" > /dev/null 2>&1; then
          WORKFLOW_NAME=$(plutil -extract WFWorkflowName raw "$SHORTCUT_FILE")
          echo "‚úÖ Workflow name: $WORKFLOW_NAME"
        else
          echo "‚ùå Missing WFWorkflowName"
          exit 1
        fi
        
    - name: Sign Shortcut with shortcuts CLI
      run: |
        echo "üîê Signing shortcut with macOS shortcuts CLI..."
        
        SIGNED_FILE="$TEMP_DIR/${{ github.event.inputs.shortcut_name }}_signed.shortcut"
        
        # Sign the shortcut
        if shortcuts sign --mode anyone --input "$SHORTCUT_FILE" --output "$SIGNED_FILE"; then
          echo "‚úÖ Shortcut signed successfully"
          echo "üìä Signed file size: $(stat -f%z "$SIGNED_FILE") bytes"
          echo "SIGNED_FILE=$SIGNED_FILE" >> $GITHUB_ENV
        else
          echo "‚ùå Shortcut signing failed"
          exit 1
        fi
        
    - name: Upload Signed Shortcut
      uses: actions/upload-artifact@v4
      with:
        name: signed-shortcut-${{ github.run_id }}
        path: ${{ env.SIGNED_FILE }}
        retention-days: 1
        
    - name: Create Download URL
      run: |
        echo "üìã Signed shortcut available as artifact"
        echo "üîó Download URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # If callback URL provided, notify completion
        if [ -n "${{ github.event.inputs.callback_url }}" ]; then
          echo "üìû Sending completion notification..."
          curl -X POST "${{ github.event.inputs.callback_url }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"success\",
              \"run_id\": \"${{ github.run_id }}\",
              \"shortcut_name\": \"${{ github.event.inputs.shortcut_name }}\",
              \"download_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"
        fi
        
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -rf "$TEMP_DIR" 