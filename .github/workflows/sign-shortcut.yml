name: Sign iOS Shortcut

on:
  workflow_dispatch:
    inputs:
      shortcut_data:
        description: 'Base64 encoded shortcut plist data'
        required: true
        type: string
      shortcut_name:
        description: 'Name of the shortcut'
        required: true
        type: string
      callback_url:
        description: 'Optional callback URL for completion notification'
        required: false
        type: string

jobs:
  sign-shortcut:
    runs-on: self-hosted
    
    steps:
    - name: Sign Shortcut (Ultra Fast)
      run: |
        echo "üöÄ Starting ultra-fast shortcut signing..."
        echo "üìù Shortcut name: ${{ github.event.inputs.shortcut_name }}"
        
        # Sanitize shortcut name for filename (remove emojis and special chars)
        SANITIZED_NAME=$(echo "${{ github.event.inputs.shortcut_name }}" | sed 's/[^a-zA-Z0-9 ._-]//g' | sed 's/  */ /g' | xargs)
        echo "üßπ Sanitized filename: $SANITIZED_NAME"
        
        # Create temp directory and files
        TEMP_DIR=$(mktemp -d)
        SHORTCUT_FILE="$TEMP_DIR/temp_shortcut.shortcut"
        SIGNED_FILE="$TEMP_DIR/${SANITIZED_NAME}.shortcut"
        
        # Decode and validate in one command
        echo "${{ github.event.inputs.shortcut_data }}" | base64 -d > "$SHORTCUT_FILE"
        
        # ‚úÖ FIXED: Sign to temp location, then force rename to correct name
        # The shortcuts CLI ignores --output filename and uses internal shortcut name
        TEMP_SIGNED="$TEMP_DIR/temp_signed.shortcut"
        
        if plutil -lint "$SHORTCUT_FILE" > /dev/null 2>&1 && \
           shortcuts sign --mode anyone --input "$SHORTCUT_FILE" --output "$TEMP_SIGNED"; then
          
          # Find the actual signed file (shortcuts CLI creates its own name)
          ACTUAL_SIGNED=$(find "$TEMP_DIR" -name "*.shortcut" -not -name "temp_shortcut.shortcut" | head -n 1)
          
          if [ -f "$ACTUAL_SIGNED" ]; then
            # Force rename to the correct filename
            mv "$ACTUAL_SIGNED" "$SIGNED_FILE"
            echo "‚úÖ Shortcut signed and renamed successfully ($(stat -f%z "$SIGNED_FILE") bytes)"
            echo "üîç Final filename: $(basename "$SIGNED_FILE")"
            echo "SIGNED_FILE=$SIGNED_FILE" >> $GITHUB_ENV
          else
            echo "‚ùå Could not find signed shortcut file"
            ls -la "$TEMP_DIR"
            exit 1
          fi
        else
          echo "‚ùå Shortcut signing failed"
          exit 1
        fi
        
    - name: Upload Signed Shortcut
      uses: actions/upload-artifact@v4
      with:
        name: signed-shortcut-${{ github.run_id }}
        path: ${{ env.SIGNED_FILE }}
        retention-days: 1
        
    - name: Notify Completion
      if: github.event.inputs.callback_url != ''
      run: |
        curl -X POST "${{ github.event.inputs.callback_url }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"success\",
            \"run_id\": \"${{ github.run_id }}\",
            \"shortcut_name\": \"${{ github.event.inputs.shortcut_name }}\",
            \"download_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
          }" 
